(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (cdar x) (cdr (car d)))
(define (cddr x) (cdr (cdr x)))
(define (caaar x) (car (car (car x))))
(define (caadr x) (car (car (cdr x))))
(define (cadar x) (car (cdr (car x))))
(define (caddr x) (car (cdr (cdr x))))
(define (cdaar x) (cdr (car (car x))))
(define (cdadr x) (cdr (car (cdr x))))
(define (cddar x) (cdr (cdr (car x))))
(define (cdddr x) (cdr (cdr (cdr x))))
(define (caaaar x) (car (car (car (car x)))))
(define (caaadr x) (car (car (car (cdr x)))))
(define (caadar x) (car (car (cdr (car x)))))
(define (caaddr x) (car (car (cdr (cdr x)))))
(define (cadaar x) (car (cdr (car (car x)))))
(define (cadadr x) (car (cdr (car (cdr x)))))
(define (caddar x) (car (cdr (cdr (car x)))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))
(define (cdaaar x) (cdr (car (car (car x)))))
(define (cdaadr x) (cdr (car (car (cdr x)))))
(define (cdadar x) (cdr (car (cdr (car x)))))
(define (cdaddr x) (cdr (car (cdr (cdr x)))))
(define (cddaar x) (cdr (cdr (car (car x)))))
(define (cddadr x) (cdr (cdr (car (cdr x)))))
(define (cdddar x) (cdr (cdr (cdr (car x)))))
(define (cddddr x) (cdr (cdr (cdr (cdr x)))))
(define (reverse lst)
  (if (null? lst) '()
    (append (reverse (cdr lst)) (list (car lst)))))

(define (memq obj lst) 
  (if (null? lst) #f
    (if (eq? obj (car lst))
      lst
      (memq obj (cdr lst)))))
      
(define (length lst)
  (if (null? lst) 0
    (+ 1 (length (cdr lst)))))

(define (list? x)
  (if (null? x) #t
    (if (pair? x)
      (list? (cdr x))
      #f)))

(define (zero? x) (= x 0))
(define (even? x) (= (modulo x 2) 0))
(define (odd? x) (not (even? x)))
(define (list-ref lst k)
  (if (zero? k) 
    (car lst)
    (list-ref (cdr lst) (- k 1))))
    
(define (assq obj alst)
  (if (null? alst) #f
      (if (equal? obj (caar alst)) (car alst) (assq obj (cdr alst))))) 